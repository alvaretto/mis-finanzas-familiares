name: 🚀 Deploy to GitHub Pages with Secure Config

on:
  push:
    branches: [ main ]
  workflow_dispatch:

permissions:
  contents: read
  pages: write
  id-token: write

concurrency:
  group: "pages"
  cancel-in-progress: false

jobs:
  deploy:
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    steps:
      - name: 📥 Checkout
        uses: actions/checkout@v4

      - name: 🔒 Generate Secure Config
        run: |
          # Crear config.js con credenciales reales desde secrets
          cat > config.js << 'EOF'
          // 🌐 CONFIGURACIÓN PARA GITHUB PAGES - GENERADA AUTOMÁTICAMENTE
          // Este archivo es generado dinámicamente por GitHub Actions
          // Las credenciales se almacenan de forma segura en GitHub Secrets
          
          // ⚠️ IMPORTANTE: Esta configuración es pública pero segura
          // - Firebase está configurado con reglas de seguridad apropiadas
          // - API Key de Gemini restringida solo para alvaretto.github.io
          // - Los datos están protegidos por autenticación Firebase
          // - Ideal para acceso móvil y uso familiar desde múltiples dispositivos
          
          // 🔒 CONFIGURACIÓN DUAL:
          // - GitHub Pages: Usa este archivo (generado automáticamente)
          // - Local: Usa config.js para desarrollo con credenciales privadas
          
          // 🔐 API Key de Gemini (restringida por dominio)
          const GEMINI_API_KEY = "${{ secrets.GEMINI_API_KEY }}";
          
          // 🔥 Configuración de Firebase (con reglas de seguridad estrictas)
          const firebaseConfig = {
              apiKey: "${{ secrets.FIREBASE_API_KEY }}",
              authDomain: "${{ secrets.FIREBASE_AUTH_DOMAIN }}",
              projectId: "${{ secrets.FIREBASE_PROJECT_ID }}",
              storageBucket: "${{ secrets.FIREBASE_STORAGE_BUCKET }}",
              messagingSenderId: "${{ secrets.FIREBASE_MESSAGING_SENDER_ID }}",
              appId: "${{ secrets.FIREBASE_APP_ID }}",
              measurementId: "${{ secrets.FIREBASE_MEASUREMENT_ID }}"
          };
          
          // 🏷️ ID de la aplicación
          const appId = '${{ secrets.FIREBASE_PROJECT_ID }}';
          
          // 🚀 Exportar configuración para uso en GitHub Pages
          window.APP_CONFIG = {
              GEMINI_API_KEY,
              firebaseConfig,
              appId,
              isPublicDeployment: true,
              generatedAt: new Date().toISOString()
          };
          
          // 📢 Mensaje informativo
          console.log('🌐 Aplicación ejecutándose en GitHub Pages');
          console.log('🔒 Configuración generada de forma segura');
          console.log('🔥 Firebase configurado para uso familiar');
          console.log('📱 Listo para acceso desde móviles');
          console.log('📂 Repositorio: https://github.com/alvaretto/mis-finanzas-familiares');
          EOF
          
          echo "✅ config.js generado con credenciales seguras"

      - name: 🔍 Verificar Configuración
        run: |
          echo "📋 Verificando que config.js fue generado correctamente..."
          if [ -f "config.js" ]; then
            echo "✅ config.js existe"
            echo "📏 Tamaño: $(wc -c < config.js) bytes"
            echo "📝 Primeras líneas:"
            head -5 config.js
          else
            echo "❌ ERROR: config.js no fue generado"
            exit 1
          fi

      - name: 📄 Setup Pages
        uses: actions/configure-pages@v4

      - name: 📦 Upload artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: '.'

      - name: 🚀 Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4

      - name: ✅ Deployment Success
        run: |
          echo "🎉 Despliegue completado exitosamente!"
          echo "🌐 URL: ${{ steps.deployment.outputs.page_url }}"
          echo "📱 La aplicación debería funcionar en móvil en 2-3 minutos"
