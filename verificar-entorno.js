// üîç SCRIPT DE VERIFICACI√ìN DEL ENTORNO DE DESARROLLO
// Ejecutar en la consola del navegador para verificar que todo funciona

console.log('üöÄ Iniciando verificaci√≥n del entorno de desarrollo...');

// 1. Verificar configuraci√≥n b√°sica
function verificarConfiguracion() {
    console.log('\nüìã 1. Verificando configuraci√≥n b√°sica...');
    
    const checks = {
        'Firebase Config': !!window.firebaseConfig,
        'APP Config': !!window.APP_CONFIG,
        'Gemini API Key': !!window.GEMINI_API_KEY,
        'Firebase SDK': typeof firebase !== 'undefined',
        'Chart.js': typeof Chart !== 'undefined'
    };
    
    Object.entries(checks).forEach(([name, status]) => {
        console.log(`${status ? '‚úÖ' : '‚ùå'} ${name}: ${status ? 'OK' : 'FALTA'}`);
    });
    
    return Object.values(checks).every(Boolean);
}

// 2. Verificar sistemas de IA
function verificarSistemasIA() {
    console.log('\nü§ñ 2. Verificando sistemas de IA...');
    
    const aiSystems = {
        'AI Memory System': typeof AIMemorySystem !== 'undefined',
        'AI Learning Engine': typeof AILearningEngine !== 'undefined',
        'Proactive Insights Engine': typeof ProactiveInsightsEngine !== 'undefined',
        'Predictive Analytics Engine': typeof PredictiveAnalyticsEngine !== 'undefined'
    };
    
    Object.entries(aiSystems).forEach(([name, status]) => {
        console.log(`${status ? '‚úÖ' : '‚ùå'} ${name}: ${status ? 'Disponible' : 'No disponible'}`);
    });
    
    return Object.values(aiSystems).every(Boolean);
}

// 3. Verificar sistemas de backup
function verificarSistemasBackup() {
    console.log('\nüíæ 3. Verificando sistemas de backup...');
    
    const backupSystems = {
        'Automatic Backup System': typeof AutomaticBackupSystem !== 'undefined',
        'Multi Export System': typeof MultiExportSystem !== 'undefined',
        'Backup Management UI': typeof BackupManagementUI !== 'undefined'
    };
    
    Object.entries(backupSystems).forEach(([name, status]) => {
        console.log(`${status ? '‚úÖ' : '‚ùå'} ${name}: ${status ? 'Disponible' : 'No disponible'}`);
    });
    
    return Object.values(backupSystems).every(Boolean);
}

// 4. Verificar optimizadores
function verificarOptimizadores() {
    console.log('\nüöÄ 4. Verificando optimizadores...');
    
    const optimizers = {
        'Performance Optimizer': typeof PerformanceOptimizer !== 'undefined',
        'Firebase Query Optimizer': typeof FirebaseQueryOptimizer !== 'undefined',
        'Mobile Optimizations': typeof MobileOptimizations !== 'undefined'
    };
    
    Object.entries(optimizers).forEach(([name, status]) => {
        console.log(`${status ? '‚úÖ' : '‚ùå'} ${name}: ${status ? 'Disponible' : 'No disponible'}`);
    });
    
    return Object.values(optimizers).every(Boolean);
}

// 5. Verificar sistema de testing
function verificarSistemaTesting() {
    console.log('\nüß™ 5. Verificando sistema de testing...');
    
    const testingSystems = {
        'Testing Framework': typeof TestingFramework !== 'undefined',
        'Assertions': typeof expect !== 'undefined',
        'Test Runner': typeof TestRunner !== 'undefined',
        'Test UI': typeof TestingUI !== 'undefined',
        'App Tests': !!window.appTests
    };
    
    Object.entries(testingSystems).forEach(([name, status]) => {
        console.log(`${status ? '‚úÖ' : '‚ùå'} ${name}: ${status ? 'Disponible' : 'No disponible'}`);
    });
    
    return Object.values(testingSystems).every(Boolean);
}

// 6. Verificar conectividad Firebase
async function verificarFirebase() {
    console.log('\nüî• 6. Verificando conectividad Firebase...');
    
    try {
        if (typeof firebase === 'undefined') {
            console.log('‚ùå Firebase SDK no est√° cargado');
            return false;
        }
        
        // Verificar que Firebase est√© inicializado
        const app = firebase.apps.length > 0 ? firebase.apps[0] : null;
        if (!app) {
            console.log('‚ùå Firebase no est√° inicializado');
            return false;
        }
        
        console.log('‚úÖ Firebase SDK cargado e inicializado');
        console.log('‚úÖ Proyecto:', app.options.projectId);
        console.log('‚úÖ Auth Domain:', app.options.authDomain);
        
        return true;
    } catch (error) {
        console.log('‚ùå Error verificando Firebase:', error.message);
        return false;
    }
}

// 7. Funci√≥n principal de verificaci√≥n
async function verificarEntornoCompleto() {
    console.log('üîç VERIFICACI√ìN COMPLETA DEL ENTORNO DE DESARROLLO');
    console.log('='.repeat(60));
    
    const resultados = {
        configuracion: verificarConfiguracion(),
        sistemasIA: verificarSistemasIA(),
        sistemasBackup: verificarSistemasBackup(),
        optimizadores: verificarOptimizadores(),
        sistemaTesting: verificarSistemaTesting(),
        firebase: await verificarFirebase()
    };
    
    console.log('\nüìä RESUMEN DE VERIFICACI√ìN:');
    console.log('='.repeat(30));
    
    const total = Object.keys(resultados).length;
    const exitosos = Object.values(resultados).filter(Boolean).length;
    const porcentaje = Math.round((exitosos / total) * 100);
    
    Object.entries(resultados).forEach(([categoria, status]) => {
        const nombre = categoria.charAt(0).toUpperCase() + categoria.slice(1);
        console.log(`${status ? '‚úÖ' : '‚ùå'} ${nombre}: ${status ? 'OK' : 'FALLA'}`);
    });
    
    console.log('\n' + '='.repeat(30));
    console.log(`üìà RESULTADO FINAL: ${exitosos}/${total} (${porcentaje}%)`);
    
    if (porcentaje >= 90) {
        console.log('üéâ ¬°ENTORNO DE DESARROLLO LISTO!');
        console.log('‚ú® Todos los sistemas est√°n funcionando correctamente');
    } else if (porcentaje >= 70) {
        console.log('‚ö†Ô∏è Entorno parcialmente funcional');
        console.log('üîß Algunos componentes necesitan atenci√≥n');
    } else {
        console.log('‚ùå Entorno con problemas significativos');
        console.log('üö® Se requiere configuraci√≥n adicional');
    }
    
    return resultados;
}

// Exportar funciones para uso manual
window.verificarEntorno = {
    completo: verificarEntornoCompleto,
    configuracion: verificarConfiguracion,
    sistemasIA: verificarSistemasIA,
    sistemasBackup: verificarSistemasBackup,
    optimizadores: verificarOptimizadores,
    sistemaTesting: verificarSistemaTesting,
    firebase: verificarFirebase
};

console.log('‚úÖ Script de verificaci√≥n cargado');
console.log('üí° Ejecuta: verificarEntorno.completo() para verificar todo');
